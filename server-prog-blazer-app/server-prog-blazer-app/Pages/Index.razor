@using server_prog_blazer_app.models;
@inject NavigationManager _navigationManager;
@inject Codes.EncryptionTest _encryption;
@inject Repo.TodoRepo _context;
@inject models.Todo _todo;
@inject Repo.HashRepo _hashContext;
@page "/"

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<div class="row">
    <div col-md-8>
        <table class="table table-primary table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Title</th>
                    <th scope="col">Stack Size</th>
                    <th scope="col">Item Price</th>
                    <th scope="col">Total Price</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in todoList)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.TodoTitle</td>
                        <td>@item.StackSize</td>
                        <td>@item.Price</td>
                        <td>@TotalPrice(item.StackSize, item.Price) Kr.</td>
                        <td>
                            <div>
                                <a href="" >Edit</a>
                                <a href="" >Delete</a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-md-4">
        @if(count == 0)
        {
            <span class="d-flex flex-md-wrap alert alert-success">
                There is no data for your TodoList. Please click on the button to create data.
            </span>

            <button type="submit" @onclick='() => CreateData(newHash)' class="btn btn-success">Create Data</button>
        } else
        {
            @if (!isValid)
            {
                <span class="d-flex flex-md-wrap alert alert-danger">There is an update to your TodoList. Please click on update to to verify.</span>
                <button  @onclick="UpdateData" class="btn btn-success">Update TodoData</button>
            }
        }
    </div>
</div>



@code{
    public string dato11 = "";
    public string UserEmailId = "";
    public List<Todo> todoList;
    public int count{ get; set; }
    public string newHash { get; set; }
    public string oldHash { get; set; }
    public bool isValid{ get; set; }


    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        todoList = new List<Todo>();
        var AuthState = await authenticationStateTask;
        var user = AuthState.User;
        if(user.Identity != null)
        {
            if (!user.Identity.IsAuthenticated)
            {
                _navigationManager.NavigateTo("Identity/Account/Login");
            }
        }
        UserEmailId = user.Identity.Name;


        await GetData();

        CheckForEmptyTable(UserEmailId);
        Task.Run(() => OldHash());
        newHash = HashedTodoListData(todoList);


        isValid = VerifyData(oldHash, newHash);
    }

    public async Task GetData()
    {
        List<Todo> ItemList = await _context.getAll(UserEmailId);
        todoList = ItemList.Select(obj => new Todo
        {
            Id = obj.Id,
            TodoTitle = _encryption.UnProtect(obj.TodoTitle),
            StackSize = obj.StackSize,
            Price = obj.Price
        }).ToList();
    }

    public int TotalPrice(int _stacksize, int _price)
    {
        int result = _stacksize * _price;
        return result;
    }

    public string HashedTodoListData(List<Todo> _todo)
    {
        string hashedData = BCrypt.Net.BCrypt.HashPassword(string.Join(",", _todo));
        return hashedData;
    }

    public async Task OldHash()
    {
        Hashed item = await _hashContext.GetHashed(UserEmailId);
        oldHash = item.HashedData; 
    }

    public bool VerifyData(string _oldHash, string _newHash)
    { 
        return BCrypt.Net.BCrypt.Verify(_oldHash, _newHash);
    }

    public async Task<Hashed> UpdateData()
    {
        Hashed item = new Hashed
            {
                UserEmailId = UserEmailId,
                HashedData = newHash
            };
        _hashContext.Update(item);
        return null;
    }

    public void CheckForEmptyTable(string userEmailId)
    {
        count = _hashContext.CheckifEmpty(userEmailId);
    }

    public async Task CreateData(string _data)
    {
        try
        {
            Hashed item = new Hashed()
                {
                    UserEmailId = UserEmailId,
                    HashedData = _data,

                };
           await _hashContext.Create(item);
        } 
        catch (Exception ex)
        {
            string message = ex.Message;
        }

    }
}


